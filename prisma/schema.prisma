generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  firstName      String?
  lastName       String?
  department     String?
  employeeId     String?         @unique
  role           UserRole        @default(USER)
  isActive       Boolean         @default(true)
  phone          String?
  location       String?
  bio            String?
  skills         String[]        @default([])
  status         UserStatus      @default(ACTIVE)
  joinedAt       DateTime?       @default(now())
  lastActive     DateTime?       @default(now())
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  accounts       Account[]
  sessions       Session[]
  comments       Comment[]
  notes          Note[]
  projectMembers ProjectMember[]
  projects       Project[]
  assignedTasks  Task[]          @relation("TaskAssignee")
  tasks          Task[]
  timeEntries    TimeEntry[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  priority    Priority        @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  color       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     String
  members     ProjectMember[]
  owner       User            @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  timeEntries TimeEntry[]

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  projectId String
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model Module {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("modules")
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("departments")
}

model TaskType {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean   @default(true)
  sortOrder Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subTasks  SubTask[]
  tasks     Task[]

  @@map("task_types")
}

model SubTask {
  id         String    @id @default(cuid())
  name       String    @unique
  isActive   Boolean   @default(true)
  sortOrder  Int?      @default(0)
  taskTypeId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  taskType   TaskType? @relation(fields: [taskTypeId], references: [id])
  tasks      Task[]

  @@map("sub_tasks")
}

model ModifyOption {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("modify_options")
}

model Reference {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("references")
}

model Task {
  id           String        @id @default(cuid())
  title        String
  description  String?
  name         String?
  date         DateTime?
  moduleId     String?
  devDeptId    String?
  taskTypeId   String?
  subTaskId    String?
  modifyId     String?
  referenceId  String?
  trackingNo   String?
  solveDate    DateTime?
  sentBy       String?
  comments     String?
  status       TaskStatus    @default(TODO)
  priority     Priority      @default(MEDIUM)
  dueDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  completedAt  DateTime?
  creatorId    String
  assigneeId   String?
  projectId    String?
  taskComments Comment[]
  tags         TaskTag[]
  assignee     User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator      User          @relation(fields: [creatorId], references: [id])
  devDept      Department?   @relation(fields: [devDeptId], references: [id])
  modify       ModifyOption? @relation(fields: [modifyId], references: [id])
  module       Module?       @relation(fields: [moduleId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])
  reference    Reference?    @relation(fields: [referenceId], references: [id])
  subTask      SubTask?      @relation(fields: [subTaskId], references: [id])
  taskType     TaskType?     @relation(fields: [taskTypeId], references: [id])
  timeEntries  TimeEntry[]

  @@map("tasks")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String    @default("#6B7280")
  createdAt DateTime  @default(now())
  tasks     TaskTag[]

  @@map("tags")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  duration    Int
  startTime   DateTime
  endTime     DateTime
  date        String
  category    String?
  billable    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  taskId      String?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model NoteCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6B7280")
  icon      String?  @default("üìù")
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]

  @@map("note_categories")
}

model Note {
  id           String        @id @default(cuid())
  title        String
  content      String
  categoryId   String?
  isPinned     Boolean       @default(false)
  isArchived   Boolean       @default(false)
  priority     Priority      @default(MEDIUM)
  tags         String[]      @default([])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastViewedAt DateTime?     @default(now())
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  category     NoteCategory? @relation(fields: [categoryId], references: [id])

  @@index([title, content])
  @@map("notes")
}

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  AWAY
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}
