// prisma/schema.prisma - UPDATED WITH CHAT SYSTEM

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  firstName      String?
  lastName       String?
  department     String?
  employeeId     String?         @unique
  role           UserRole        @default(USER)
  isActive       Boolean         @default(true)
  phone          String?
  location       String?
  bio            String?
  skills         String[]        @default([])
  status         UserStatus      @default(ACTIVE)
  joinedAt       DateTime?       @default(now())
  lastActive     DateTime?       @default(now())
  
  // Chat-related fields for performance
  isOnline       Boolean         @default(false)
  lastSeen       DateTime?       @default(now())
  socketId       String?         // For real-time connection tracking
  
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  
  // Existing relations
  accounts       Account[]
  sessions       Session[]
  comments       Comment[]
  notes          Note[]
  projectMembers ProjectMember[]
  projects       Project[]
  assignedTasks  Task[]          @relation("TaskAssignee")
  tasks          Task[]
  timeEntries    TimeEntry[]
  
  // New Chat relations
  createdChatRooms    ChatRoom[]       @relation("ChatRoomCreator")
  chatMemberships     ChatRoomMember[] @relation("ChatRoomMemberships")
  sentMessages        ChatMessage[]    @relation("SentMessages")
  messageReactions    MessageReaction[]
  typingStatuses      TypingStatus[]

  @@index([isOnline, lastSeen]) // Performance: Online users lookup
  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String          @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus   @default(ACTIVE)
  priority    Priority        @default(MEDIUM)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  color       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  ownerId     String
  members     ProjectMember[]
  owner       User            @relation(fields: [ownerId], references: [id])
  tasks       Task[]
  timeEntries TimeEntry[]
  
  // New Chat relation
  chatRooms   ChatRoom[]      // Project-specific chat rooms

  @@map("projects")
}

model ProjectMember {
  id        String      @id @default(cuid())
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  projectId String
  userId    String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

// ===== CHAT SYSTEM MODELS (HIGH-PERFORMANCE) =====

model ChatRoom {
  id              String   @id @default(cuid())
  name            String   @db.VarChar(100)
  description     String?  @db.VarChar(500)
  type            RoomType @default(GENERAL)
  projectId       String?
  isPrivate       Boolean  @default(false)
  isActive        Boolean  @default(true)
  
  // Performance optimization fields
  lastMessageAt   DateTime? // Quick sorting without joins
  messageCount    Int      @default(0) // Cached count
  memberCount     Int      @default(0) // Cached count
  
  createdBy       String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  project         Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)
  creator         User     @relation("ChatRoomCreator", fields: [createdBy], references: [id])
  members         ChatRoomMember[]
  messages        ChatMessage[]

  // High-performance indexes
  @@index([type, isActive, lastMessageAt(sort: Desc)]) // Fast room listing
  @@index([projectId, isActive]) // Project-specific rooms
  @@index([createdBy]) // User's created rooms
  @@index([isPrivate, isActive]) // Public/private filtering
  @@map("chat_rooms")
}

model ChatRoomMember {
  id           String   @id @default(cuid())
  roomId       String
  userId       String
  role         MemberRole @default(MEMBER)
  joinedAt     DateTime @default(now())
  lastReadAt   DateTime @default(now()) // Performance: Read status tracking
  unreadCount  Int      @default(0) // Performance: Cached unread count
  isActive     Boolean  @default(true)
  isMuted      Boolean  @default(false)
  
  // Notification preferences
  notifyOnMention Boolean @default(true)
  notifyOnAll     Boolean @default(true)

  // Relations
  room         ChatRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user         User     @relation("ChatRoomMemberships", fields: [userId], references: [id], onDelete: Cascade)

  // Performance: Unique constraint + optimized indexes
  @@unique([roomId, userId])
  @@index([userId, isActive, lastReadAt]) // User's active rooms with read status
  @@index([roomId, isActive]) // Room's active members
  @@index([unreadCount]) // Quick unread queries
  @@map("chat_room_members")
}

model ChatMessage {
  id            String      @id @default(cuid())
  content       String      @db.Text
  type          MessageType @default(TEXT)
  roomId        String
  senderId      String
  replyToId     String?
  
  // Performance and features
  isEdited      Boolean     @default(false)
  isDeleted     Boolean     @default(false)
  editedAt      DateTime?
  
  // JSON metadata for performance (mentions, files, etc.)
  metadata      Json?       // Store file info, mentions, reactions count
  
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  room          ChatRoom    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender        User        @relation("SentMessages", fields: [senderId], references: [id])
  replyTo       ChatMessage? @relation("MessageReplies", fields: [replyToId], references: [id])
  replies       ChatMessage[] @relation("MessageReplies")
  reactions     MessageReaction[]
  attachments   MessageAttachment[]

  // High-performance indexes for chat loading
  @@index([roomId, createdAt(sort: Desc)]) // Fast message loading by room
  @@index([senderId, createdAt]) // User's message history
  @@index([replyToId]) // Thread replies
  @@index([type, roomId]) // Filter by message type
  @@map("chat_messages")
}

model MessageReaction {
  id        String @id @default(cuid())
  messageId String
  userId    String
  emoji     String @db.VarChar(10) // Optimize storage
  createdAt DateTime @default(now())

  // Relations
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Performance: Prevent duplicate reactions
  @@unique([messageId, userId, emoji])
  @@index([messageId]) // Fast reaction loading
  @@map("message_reactions")
}

model MessageAttachment {
  id        String @id @default(cuid())
  messageId String
  fileName  String
  fileUrl   String
  fileType  String @db.VarChar(50)
  fileSize  Int    // in bytes
  createdAt DateTime @default(now())

  // Relations
  message   ChatMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId]) // Fast attachment loading
  @@map("message_attachments")
}

// Real-time typing indicators (separate table for performance)
model TypingStatus {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  startedAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Performance: Auto-cleanup old typing statuses
  @@unique([roomId, userId])
  @@index([roomId, startedAt]) // Clean up old typing statuses
  @@map("typing_statuses")
}

// ===== EXISTING MODELS (UNCHANGED) =====

model Module {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("modules")
}

model Department {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("departments")
}

model TaskType {
  id        String    @id @default(cuid())
  name      String    @unique
  isActive  Boolean   @default(true)
  sortOrder Int?      @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  subTasks  SubTask[]
  tasks     Task[]

  @@map("task_types")
}

model SubTask {
  id         String    @id @default(cuid())
  name       String    @unique
  isActive   Boolean   @default(true)
  sortOrder  Int?      @default(0)
  taskTypeId String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  taskType   TaskType? @relation(fields: [taskTypeId], references: [id])
  tasks      Task[]

  @@map("sub_tasks")
}

model ModifyOption {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("modify_options")
}

model Reference {
  id        String   @id @default(cuid())
  name      String   @unique
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  tasks     Task[]

  @@map("references")
}

model Task {
  id           String        @id @default(cuid())
  title        String
  description  String?
  name         String?
  date         DateTime?
  moduleId     String?
  devDeptId    String?
  taskTypeId   String?
  subTaskId    String?
  modifyId     String?
  referenceId  String?
  trackingNo   String?
  solveDate    DateTime?
  sentBy       String?
  comments     String?
  status       TaskStatus    @default(TODO)
  priority     Priority      @default(MEDIUM)
  dueDate      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  completedAt  DateTime?
  creatorId    String
  assigneeId   String?
  projectId    String?
  taskComments Comment[]
  tags         TaskTag[]
  assignee     User?         @relation("TaskAssignee", fields: [assigneeId], references: [id])
  creator      User          @relation(fields: [creatorId], references: [id])
  devDept      Department?   @relation(fields: [devDeptId], references: [id])
  modify       ModifyOption? @relation(fields: [modifyId], references: [id])
  module       Module?       @relation(fields: [moduleId], references: [id])
  project      Project?      @relation(fields: [projectId], references: [id])
  reference    Reference?    @relation(fields: [referenceId], references: [id])
  subTask      SubTask?      @relation(fields: [subTaskId], references: [id])
  taskType     TaskType?     @relation(fields: [taskTypeId], references: [id])
  timeEntries  TimeEntry[]

  @@map("tasks")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String    @default("#6B7280")
  createdAt DateTime  @default(now())
  tasks     TaskTag[]

  @@map("tags")
}

model TaskTag {
  id     String @id @default(cuid())
  taskId String
  tagId  String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, tagId])
  @@map("task_tags")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  taskId    String
  authorId  String
  author    User     @relation(fields: [authorId], references: [id])
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model TimeEntry {
  id          String   @id @default(cuid())
  description String?
  duration    Int
  startTime   DateTime
  endTime     DateTime
  date        String
  category    String?
  billable    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  taskId      String?
  projectId   String?
  project     Project? @relation(fields: [projectId], references: [id])
  task        Task?    @relation(fields: [taskId], references: [id])
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model NoteCategory {
  id        String   @id @default(cuid())
  name      String   @unique
  color     String   @default("#6B7280")
  icon      String?  @default("📝")
  isActive  Boolean  @default(true)
  sortOrder Int?     @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  notes     Note[]

  @@map("note_categories")
}

model Note {
  id           String        @id @default(cuid())
  title        String
  content      String
  categoryId   String?
  isPinned     Boolean       @default(false)
  isArchived   Boolean       @default(false)
  priority     Priority      @default(MEDIUM)
  tags         String[]      @default([])
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  lastViewedAt DateTime?     @default(now())
  authorId     String
  author       User          @relation(fields: [authorId], references: [id])
  category     NoteCategory? @relation(fields: [categoryId], references: [id])

  @@index([title, content])
  @@map("notes")
}

// ===== ENUMS =====

enum UserRole {
  ADMIN
  USER
}

enum UserStatus {
  ACTIVE
  INACTIVE
  AWAY
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  PAUSED
  CANCELLED
}

enum ProjectRole {
  OWNER
  MANAGER
  MEMBER
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  IN_REVIEW
  COMPLETED
  CANCELLED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// New Chat Enums
enum RoomType {
  GENERAL     // Company-wide general chat
  PROJECT     // Project-specific discussions
  DIRECT      // Direct message between users
  ANNOUNCEMENT // Admin announcements only
}

enum MessageType {
  TEXT        // Regular text message
  IMAGE       // Image attachment
  FILE        // File attachment
  SYSTEM      // System-generated message
  TASK_UPDATE // Task status/assignment updates
}

enum MemberRole {
  ADMIN       // Full room control
  MODERATOR   // Can manage messages/members
  MEMBER      // Regular participant
}